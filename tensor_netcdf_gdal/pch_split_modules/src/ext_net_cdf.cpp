#include "ext_net_cdf.hpp"

extern "C" void init_ext_net_cdf() {
  Module rb_mNetCDF = define_module("NetCDF");
  rb_mNetCDF.define_constant("NULL_ID", NULL_ID);
  rb_mNetCDF.define_constant("GLOBAL", NC_GLOBAL);
  rb_mNetCDF.define_constant("NOWRITE", NC_NOWRITE);
  rb_mNetCDF.define_constant("WRITE", NC_WRITE);
  rb_mNetCDF.define_constant("CLOBBER", NC_CLOBBER);
  rb_mNetCDF.define_constant("NOCLOBBER", NC_NOCLOBBER);
  rb_mNetCDF.define_constant("CLASSIC_MODEL", NC_CLASSIC_MODEL);
  rb_mNetCDF.define_constant("SHARE", NC_SHARE);
  rb_mNetCDF.define_constant("NETCDF4", NC_NETCDF4);
  rb_mNetCDF.define_constant("UNLIMITED", NC_UNLIMITED);
  rb_mNetCDF.define_constant("FILL_STRING", NC_FILL_CHAR);
  rb_mNetCDF.define_constant("FILL_INT8", NC_FILL_BYTE);
  rb_mNetCDF.define_constant("FILL_INT16", NC_FILL_SHORT);
  rb_mNetCDF.define_constant("FILL_INT32", NC_FILL_INT);
  rb_mNetCDF.define_constant("FILL_INT64", NC_FILL_INT64);
  rb_mNetCDF.define_constant("FILL_SFLOAT", NC_FILL_FLOAT);
  rb_mNetCDF.define_constant("FILL_DFLOAT", NC_FILL_DOUBLE);
  rb_mNetCDF.define_constant("FILL_UINT8", NC_FILL_UBYTE);
  rb_mNetCDF.define_constant("FILL_UINT16", NC_FILL_USHORT);
  rb_mNetCDF.define_constant("FILL_UINT32", NC_FILL_UINT);
  rb_mNetCDF.define_constant("FILL_UINT64", NC_FILL_UINT64);
  Enum<NetCDF::Type> rb_eNetCDF_dc_Type = define_enum_under<NetCDF::Type>("Type", rb_mNetCDF);
  rb_eNetCDF_dc_Type.define_value("Int32", NetCDF::Type::Int32);
  rb_eNetCDF_dc_Type.define_value("Int64", NetCDF::Type::Int64);
  rb_eNetCDF_dc_Type.define_value("SFloat", NetCDF::Type::SFloat);
  rb_eNetCDF_dc_Type.define_value("DFloat", NetCDF::Type::DFloat);
  rb_eNetCDF_dc_Type.define_value("UInt8", NetCDF::Type::UInt8);
  rb_eNetCDF_dc_Type.define_value("UInt32", NetCDF::Type::UInt32);
  rb_eNetCDF_dc_Type.define_value("String", NetCDF::Type::String);
  rb_mNetCDF.define_singleton_function("version", &NetCDF::version);
  Data_Type<NetCDF::Base> rb_cNetCDF_dc_Base = define_class_under<NetCDF::Base>(rb_mNetCDF, "Base");
  rb_cNetCDF_dc_Base.define_attr("id", &NetCDF::Base::id, AttrAccess::Read);
  Data_Type<NetCDF::File> rb_cNetCDF_dc_File = define_class_under<NetCDF::File, NetCDF::Base>(rb_mNetCDF, "File");
  rb_cNetCDF_dc_File.define_attr("path", &NetCDF::File::path, AttrAccess::Read);
  rb_cNetCDF_dc_File.define_attr("mode", &NetCDF::File::mode, AttrAccess::Read);
  rb_cNetCDF_dc_File.define_attr("flags", &NetCDF::File::flags, AttrAccess::Read);
  rb_cNetCDF_dc_File.define_constructor(Constructor<NetCDF::File>());
  rb_cNetCDF_dc_File.define_constructor(Constructor<NetCDF::File, const string &, Ostring, Obool, Obool, Obool>(), Arg("path"), Arg("mode") = nil, Arg("nc4_classic") = nil, Arg("classic") = nil, Arg("share") = nil);
  rb_cNetCDF_dc_File.define_method("open", &NetCDF::File::open);
  rb_cNetCDF_dc_File.define_method("close", &NetCDF::File::close);
  rb_cNetCDF_dc_File.define_method("closed?", &NetCDF::File::is_closed);
  rb_cNetCDF_dc_File.define_method("sync", &NetCDF::File::sync);
  rb_cNetCDF_dc_File.define_method("format", &NetCDF::File::format);
  rb_cNetCDF_dc_File.define_method("dims", &NetCDF::File::dims);
  rb_cNetCDF_dc_File.define_method("vars", &NetCDF::File::vars);
  rb_cNetCDF_dc_File.define_method("atts", &NetCDF::File::atts);
  rb_cNetCDF_dc_File.define_method("dim", &NetCDF::File::dim);
  rb_cNetCDF_dc_File.define_method("var", &NetCDF::File::var);
  rb_cNetCDF_dc_File.define_method("att", &NetCDF::File::att);
  rb_cNetCDF_dc_File.define_method("create_dim", &NetCDF::File::create_dim);
  rb_cNetCDF_dc_File.define_method("create_var", &NetCDF::File::create_var);
  rb_cNetCDF_dc_File.define_method("write_att", &NetCDF::File::write_att);
  rb_cNetCDF_dc_File.define_method("write_att_s", &NetCDF::File::write_att_s);
  rb_cNetCDF_dc_File.define_method("set_define_mode", &NetCDF::File::set_define_mode);
  rb_cNetCDF_dc_File.define_method("set_fill", &NetCDF::File::set_fill);
  Data_Type<NetCDF::BelongsToFile> rb_cNetCDF_dc_BelongsToFile = define_class_under<NetCDF::BelongsToFile, NetCDF::Base>(rb_mNetCDF, "BelongsToFile");
  rb_cNetCDF_dc_BelongsToFile.define_attr("file_id", &NetCDF::BelongsToFile::file_id, AttrAccess::Read);
  Data_Type<NetCDF::Dim> rb_cNetCDF_dc_Dim = define_class_under<NetCDF::Dim, NetCDF::BelongsToFile>(rb_mNetCDF, "Dim");
  rb_cNetCDF_dc_Dim.define_constructor(Constructor<NetCDF::Dim, const NetCDF::Dim&>());
  rb_cNetCDF_dc_Dim.define_method("name", &NetCDF::Dim::name);
  rb_cNetCDF_dc_Dim.define_method("name=", &NetCDF::Dim::rename);
  rb_cNetCDF_dc_Dim.define_method("unlimited?", &NetCDF::Dim::is_unlimited);
  rb_cNetCDF_dc_Dim.define_method("size", &NetCDF::Dim::size);
  Data_Type<NetCDF::Att> rb_cNetCDF_dc_Att = define_class_under<NetCDF::Att, NetCDF::BelongsToFile>(rb_mNetCDF, "Att");
  rb_cNetCDF_dc_Att.define_attr("var_id", &NetCDF::Att::var_id, AttrAccess::Read);
  rb_cNetCDF_dc_Att.define_attr("name", &NetCDF::Att::name, AttrAccess::Read);
  rb_cNetCDF_dc_Att.define_constructor(Constructor<NetCDF::Att, const NetCDF::Att&>());
  rb_cNetCDF_dc_Att.define_method("name=", &NetCDF::Att::rename);
  rb_cNetCDF_dc_Att.define_method("type", &NetCDF::Att::type);
  rb_cNetCDF_dc_Att.define_method("size", &NetCDF::Att::size);
  rb_cNetCDF_dc_Att.define_method("read", &NetCDF::Att::read);
  rb_cNetCDF_dc_Att.define_method("destroy", &NetCDF::Att::destroy);
  Data_Type<NetCDF::Var> rb_cNetCDF_dc_Var = define_class_under<NetCDF::Var, NetCDF::BelongsToFile>(rb_mNetCDF, "Var");
  rb_cNetCDF_dc_Var.define_constructor(Constructor<NetCDF::Var, const NetCDF::Var&>());
  rb_cNetCDF_dc_Var.define_method("name", &NetCDF::Var::name);
  rb_cNetCDF_dc_Var.define_method("name=", &NetCDF::Var::rename);
  rb_cNetCDF_dc_Var.define_method("type", &NetCDF::Var::type);
  rb_cNetCDF_dc_Var.define_method("dims_count", &NetCDF::Var::dims_count);
  rb_cNetCDF_dc_Var.define_method("dims", &NetCDF::Var::dims);
  rb_cNetCDF_dc_Var.define_method("atts", &NetCDF::Var::atts);
  rb_cNetCDF_dc_Var.define_method("dim", &NetCDF::Var::dim);
  rb_cNetCDF_dc_Var.define_method("att", &NetCDF::Var::att);
  rb_cNetCDF_dc_Var.define_method("shape", &NetCDF::Var::shape);
  rb_cNetCDF_dc_Var.define_method("write_att", &NetCDF::Var::write_att);
  rb_cNetCDF_dc_Var.define_method("write_att_s", &NetCDF::Var::write_att_s);
  rb_cNetCDF_dc_Var.define_method("write", &NetCDF::Var::write);
  rb_cNetCDF_dc_Var.define_method("write_s", &NetCDF::Var::write_s);
  rb_cNetCDF_dc_Var.define_method("read", &NetCDF::Var::read);
  rb_cNetCDF_dc_Var.define_method("fill_value", &NetCDF::Var::fill_value);
  rb_cNetCDF_dc_Var.define_method("set_fill_value", &NetCDF::Var::set_fill_value);
  rb_cNetCDF_dc_Var.define_method("fill", &NetCDF::Var::fill);
  rb_cNetCDF_dc_Var.define_method("set_fill", &NetCDF::Var::set_fill);
  rb_cNetCDF_dc_Var.define_method("endian", &NetCDF::Var::endian);
  rb_cNetCDF_dc_Var.define_method("set_endian", &NetCDF::Var::set_endian);
  rb_cNetCDF_dc_Var.define_method("checksum", &NetCDF::Var::checksum);
  rb_cNetCDF_dc_Var.define_method("set_checksum", &NetCDF::Var::set_checksum);
  rb_cNetCDF_dc_Var.define_method("deflate", &NetCDF::Var::deflate);
  rb_cNetCDF_dc_Var.define_method("set_deflate", &NetCDF::Var::set_deflate);
  rb_cNetCDF_dc_Var.define_method("quantize", &NetCDF::Var::quantize);
  rb_cNetCDF_dc_Var.define_method("set_quantize", &NetCDF::Var::set_quantize);
  rb_cNetCDF_dc_Var.define_method("chunking", &NetCDF::Var::chunking);
  rb_cNetCDF_dc_Var.define_method("set_chunking", &NetCDF::Var::set_chunking);
  rb_cNetCDF_dc_Var.define_method("chunk_cache", &NetCDF::Var::chunk_cache);
  rb_cNetCDF_dc_Var.define_method("set_chunk_cache", &NetCDF::Var::set_chunk_cache);
}
